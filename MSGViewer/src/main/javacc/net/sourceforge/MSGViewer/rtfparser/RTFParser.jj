/*
 * This is a RTF Parser according to the specification of Microsoft http://support.microsoft.com/kb/269575
 *
 * The goal of this parser is ignoring all RTF Text and let come the hidden HTML Code come out again
 */

options {
    STATIC=false;
}


PARSER_BEGIN(RTFParser)
package net.sourceforge.MSGViewer.rtfparser;
import java.nio.charset.Charset;
import java.util.*;

public class RTFParser {

    private final Deque<RTFGroup> groups = new LinkedList<>();
    private final StringBuilder htmlContent = new StringBuilder();
    private RTFGroup current_group;
    private Charset characterSet;

    public String getHTML()
    {
        return htmlContent.toString();
    }

    public void pushGroup()
    {
        current_group = new RTFGroup(characterSet, htmlContent, current_group);
        groups.push(current_group);
    }

    public void popGroup()
    {
        groups.pop();
        current_group = groups.peek();
    }
}
PARSER_END(RTFParser)

SKIP : { " " | "\r" | "\n" | "\r\n" }


<DEFAULT> TOKEN :
{ < GROUP_START : "{" >
| < GROUP_END : "}" >
| < C_CODEPAGE : "\\ansicpg" ( [ "0"-"9"] ) + >
| < C_BRACE_OPEN : "\\{" >
| < C_BRACE_CLOSE : "\\}" >
| < C_NONBREAKING_SPACE : "\\~" >
| < C_OPTIONAL_HYPHEN : "\\-" >
| < C_NONBREAKING_HYPHEN : "\\_" >
| < C_BACKSLASH : "\\\\" >
| < C_PARAGRAPH : "\\par" >
| < C_TABULATION : "\\tab" >
| < C_LEFT_QUOTE : "\\lquote" >
| < C_RIGHT_QUOTE : "\\rquote" >
| < C_LEFT_DOUBLE_QUOTE : "\\ldblquote" >
| < C_RIGHT_DOUBLE_QUOTE : "\\rdblquote" >
| < C_BULLET : "\\bullet" >
| < C_EN_DASH : "\\endash" >
| < C_EM_DASH : "\\emdash" >
| < C_ESC_STRING : "\\'" ( ["A"-"Z","a"-"z","0"-"9"] ){2} >
| < C_UNICODE : "\\u" ("-")? (["0"-"9"]){1,5} >
| < C_COMMAND : "\\" ( ["A"-"Z","a"-"z", "-", "0"-"9"] )+ >
| < C_DESTINATION_GROUP : "\\*" >
| < STRING: (~["\\", "\r", "\n", "}", "{", " "]) (~["\\", "\r", "\n", "}", "{"])* >
}

void parse() : {}
{
    ( group() )+ <EOF>
}

void group() : {}
{
    <GROUP_START> { pushGroup(); }
    ( set_codepage()
    | destinationGroup()
    | <C_BRACE_OPEN> { current_group.addTextContent( "{" ); }
    | <C_BRACE_CLOSE> { current_group.addTextContent( "}" ); }
    | <C_OPTIONAL_HYPHEN> { current_group.addTextContent("-"); }
    | <C_PARAGRAPH> { current_group.addTextContent("\n"); }
    | <C_TABULATION> { current_group.addTextContent("\t"); }
    | <C_BACKSLASH> { current_group.addTextContent("\\"); }
    | <C_LEFT_QUOTE> { current_group.addTextContent("&lsquo;"); }
    | <C_RIGHT_QUOTE> { current_group.addTextContent("&rsquo;"); }
    | <C_LEFT_DOUBLE_QUOTE> { current_group.addTextContent("&ldquo;"); }
    | <C_RIGHT_DOUBLE_QUOTE> { current_group.addTextContent("&rdquo;"); }
    | <C_BULLET> { current_group.addTextContent("&bull;"); }
    | <C_EN_DASH> { current_group.addTextContent("&ndash;"); }
    | <C_EM_DASH> { current_group.addTextContent("&mdash;"); }
    | <C_NONBREAKING_SPACE> { current_group.addTextContent("&nbsp;"); }
    | <C_NONBREAKING_HYPHEN> { current_group.addTextContent("&shy;"); }
    | escaped_char()
    | unicode_char()
    | command()
    | string_sequence()
    | group()
    )*
    <GROUP_END> { popGroup(); }
}

void destinationGroup() : {
 Token destination;
}
{
    <C_DESTINATION_GROUP>
    destination = <C_COMMAND>
    {
        current_group.destination( destination.image );
    }
}

void escaped_char() :
{
    Token escaped;
}
{
    escaped = <C_ESC_STRING>
    {
        current_group.addEscapedChar( escaped.image );
    }
}

void unicode_char() :
{
    Token code;
}
{
    code = <C_UNICODE>
    (<STRING> | <C_ESC_STRING>)
    {
        current_group.addUnicodeChar( code.image );
    }
}

void set_codepage() :
{
    Token codepage;
}
{
    codepage = <C_CODEPAGE>
    {
        characterSet = Charset.forName("CP" + codepage.image.substring(8));
    }
}

void string_sequence() :
{
    Token string;
}
{
    string = <STRING>
    {
       current_group.addTextContent( string.image );
    }
}

void command() :
{
    Token command;
}
{
    command = <C_COMMAND>
    {
        current_group.handleCommand( command.image );
    }
}
